{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9178166,"sourceType":"datasetVersion","datasetId":5547076},{"sourceId":10290334,"sourceType":"datasetVersion","datasetId":6368557},{"sourceId":10290338,"sourceType":"datasetVersion","datasetId":6368559},{"sourceId":10343386,"sourceType":"datasetVersion","datasetId":6405098},{"sourceId":10343400,"sourceType":"datasetVersion","datasetId":6405107}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"papermill":{"default_parameters":{},"duration":10.671996,"end_time":"2024-12-23T05:03:56.141377","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-12-23T05:03:45.469381","version":"2.6.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Submission - Inquisitive_Turtles","metadata":{"papermill":{"duration":0.006284,"end_time":"2024-12-23T05:03:47.831741","exception":false,"start_time":"2024-12-23T05:03:47.825457","status":"completed"},"tags":[]}},{"cell_type":"code","source":"import pandas as pd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:36:51.865696Z","iopub.execute_input":"2024-12-31T22:36:51.866015Z","iopub.status.idle":"2024-12-31T22:36:51.869387Z","shell.execute_reply.started":"2024-12-31T22:36:51.865987Z","shell.execute_reply":"2024-12-31T22:36:51.868710Z"}},"outputs":[],"execution_count":124},{"cell_type":"markdown","source":"# Imported data","metadata":{}},{"cell_type":"code","source":"train_df = pd.read_csv('/kaggle/input/data-insurance/train.csv')\ntest_df = pd.read_csv('/kaggle/input/test-data/test (1).csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:36:51.870283Z","iopub.execute_input":"2024-12-31T22:36:51.870563Z","iopub.status.idle":"2024-12-31T22:36:57.555380Z","shell.execute_reply.started":"2024-12-31T22:36:51.870541Z","shell.execute_reply":"2024-12-31T22:36:57.554642Z"}},"outputs":[],"execution_count":125},{"cell_type":"markdown","source":"# Statistical summary of train and test sets","metadata":{}},{"cell_type":"code","source":"print('\\ntrain df stats')\nprint(train_df.describe())\nprint('\\ntest df stats')\nprint(test_df.describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:36:57.556457Z","iopub.execute_input":"2024-12-31T22:36:57.556673Z","iopub.status.idle":"2024-12-31T22:36:58.410493Z","shell.execute_reply.started":"2024-12-31T22:36:57.556652Z","shell.execute_reply":"2024-12-31T22:36:58.409664Z"}},"outputs":[{"name":"stdout","text":"\ntrain df stats\n                 id           Age  Annual Income  Number of Dependents  \\\ncount  1.200000e+06  1.181295e+06   1.155051e+06          1.090328e+06   \nmean   5.999995e+05  4.114556e+01   3.274522e+04          2.009934e+00   \nstd    3.464103e+05  1.353995e+01   3.217951e+04          1.417338e+00   \nmin    0.000000e+00  1.800000e+01   1.000000e+00          0.000000e+00   \n25%    2.999998e+05  3.000000e+01   8.001000e+03          1.000000e+00   \n50%    5.999995e+05  4.100000e+01   2.391100e+04          2.000000e+00   \n75%    8.999992e+05  5.300000e+01   4.463400e+04          3.000000e+00   \nmax    1.199999e+06  6.400000e+01   1.499970e+05          4.000000e+00   \n\n       Health Score  Previous Claims   Vehicle Age  Credit Score  \\\ncount  1.125924e+06    835971.000000  1.199994e+06  1.062118e+06   \nmean   2.561391e+01         1.002689  9.569889e+00  5.929244e+02   \nstd    1.220346e+01         0.982840  5.776189e+00  1.499819e+02   \nmin    2.012237e+00         0.000000  0.000000e+00  3.000000e+02   \n25%    1.591896e+01         0.000000  5.000000e+00  4.680000e+02   \n50%    2.457865e+01         1.000000  1.000000e+01  5.950000e+02   \n75%    3.452721e+01         2.000000  1.500000e+01  7.210000e+02   \nmax    5.897591e+01         9.000000  1.900000e+01  8.490000e+02   \n\n       Insurance Duration  Premium Amount  \ncount        1.199999e+06    1.200000e+06  \nmean         5.018219e+00    1.102545e+03  \nstd          2.594331e+00    8.649989e+02  \nmin          1.000000e+00    2.000000e+01  \n25%          3.000000e+00    5.140000e+02  \n50%          5.000000e+00    8.720000e+02  \n75%          7.000000e+00    1.509000e+03  \nmax          9.000000e+00    4.999000e+03  \n\ntest df stats\n                 id            Age  Annual Income  Number of Dependents  \\\ncount  8.000000e+05  787511.000000  770140.000000         726870.000000   \nmean   1.600000e+06      41.136440   32803.871471              2.009337   \nstd    2.309403e+05      13.537829   32201.063749              1.415241   \nmin    1.200000e+06      18.000000       2.000000              0.000000   \n25%    1.400000e+06      30.000000    8048.000000              1.000000   \n50%    1.600000e+06      41.000000   23981.000000              2.000000   \n75%    1.799999e+06      53.000000   44660.000000              3.000000   \nmax    1.999999e+06      64.000000  149997.000000              4.000000   \n\n        Health Score  Previous Claims    Vehicle Age   Credit Score  \\\ncount  750551.000000    557198.000000  799997.000000  708549.000000   \nmean       25.613036         1.004873       9.571891     592.904749   \nstd        12.206882         0.982803       5.772200     150.116374   \nmin         1.646561         0.000000       0.000000     300.000000   \n25%        15.917353         0.000000       5.000000     468.000000   \n50%        24.580164         1.000000      10.000000     595.000000   \n75%        34.517766         2.000000      15.000000     721.000000   \nmax        57.957351         9.000000      19.000000     849.000000   \n\n       Insurance Duration  \ncount       799998.000000  \nmean             5.018949  \nstd              2.593759  \nmin              1.000000  \n25%              3.000000  \n50%              5.000000  \n75%              7.000000  \nmax              9.000000  \n","output_type":"stream"}],"execution_count":126},{"cell_type":"markdown","source":"# Checking Missing values","metadata":{}},{"cell_type":"code","source":"def check_missing(df):\n    missing_values = df.isnull().sum()\n    cols_with_missing = missing_values[missing_values > 0]\n    print(cols_with_missing)\n    print('\\n')\nprint('\\nchecking missing values for train df')\ncheck_missing(train_df)\nprint('\\nchecking missing values for test df')\ncheck_missing(test_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:36:58.411687Z","iopub.execute_input":"2024-12-31T22:36:58.411907Z","iopub.status.idle":"2024-12-31T22:36:59.283231Z","shell.execute_reply.started":"2024-12-31T22:36:58.411888Z","shell.execute_reply":"2024-12-31T22:36:59.282530Z"}},"outputs":[{"name":"stdout","text":"\nchecking missing values for train df\nAge                      18705\nAnnual Income            44949\nMarital Status           18529\nNumber of Dependents    109672\nOccupation              358075\nHealth Score             74076\nPrevious Claims         364029\nVehicle Age                  6\nCredit Score            137882\nInsurance Duration           1\nCustomer Feedback        77824\ndtype: int64\n\n\n\nchecking missing values for test df\nAge                      12489\nAnnual Income            29860\nMarital Status           12336\nNumber of Dependents     73130\nOccupation              239125\nHealth Score             49449\nPrevious Claims         242802\nVehicle Age                  3\nCredit Score             91451\nInsurance Duration           2\nCustomer Feedback        52276\ndtype: int64\n\n\n","output_type":"stream"}],"execution_count":127},{"cell_type":"code","source":"train_df = train_df.dropna(subset = 'Premium Amount')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:36:59.284058Z","iopub.execute_input":"2024-12-31T22:36:59.284374Z","iopub.status.idle":"2024-12-31T22:36:59.469738Z","shell.execute_reply.started":"2024-12-31T22:36:59.284333Z","shell.execute_reply":"2024-12-31T22:36:59.468961Z"}},"outputs":[],"execution_count":128},{"cell_type":"code","source":"train_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:36:59.470693Z","iopub.execute_input":"2024-12-31T22:36:59.471012Z","iopub.status.idle":"2024-12-31T22:37:00.173483Z","shell.execute_reply.started":"2024-12-31T22:36:59.470976Z","shell.execute_reply":"2024-12-31T22:37:00.172762Z"}},"outputs":[{"execution_count":129,"output_type":"execute_result","data":{"text/plain":"              id   Age  Gender  Annual Income Marital Status  \\\n0              0  19.0  Female        10049.0        Married   \n1              1  39.0  Female        31678.0       Divorced   \n2              2  23.0    Male        25602.0       Divorced   \n3              3  21.0    Male       141855.0        Married   \n4              4  21.0    Male        39651.0         Single   \n...          ...   ...     ...            ...            ...   \n1199995  1199995  36.0  Female        27316.0        Married   \n1199996  1199996  54.0    Male        35786.0       Divorced   \n1199997  1199997  19.0    Male        51884.0       Divorced   \n1199998  1199998  55.0    Male            NaN         Single   \n1199999  1199999  21.0  Female            NaN       Divorced   \n\n         Number of Dependents Education Level     Occupation  Health Score  \\\n0                         1.0      Bachelor's  Self-Employed     22.598761   \n1                         3.0        Master's            NaN     15.569731   \n2                         3.0     High School  Self-Employed     47.177549   \n3                         2.0      Bachelor's            NaN     10.938144   \n4                         1.0      Bachelor's  Self-Employed     20.376094   \n...                       ...             ...            ...           ...   \n1199995                   0.0        Master's     Unemployed     13.772907   \n1199996                   NaN        Master's  Self-Employed     11.483482   \n1199997                   0.0        Master's            NaN     14.724469   \n1199998                   1.0             PhD            NaN     18.547381   \n1199999                   0.0             PhD            NaN     10.125323   \n\n         Location  ... Previous Claims  Vehicle Age  Credit Score  \\\n0           Urban  ...             2.0         17.0         372.0   \n1           Rural  ...             1.0         12.0         694.0   \n2        Suburban  ...             1.0         14.0           NaN   \n3           Rural  ...             1.0          0.0         367.0   \n4           Rural  ...             0.0          8.0         598.0   \n...           ...  ...             ...          ...           ...   \n1199995     Urban  ...             NaN          5.0         372.0   \n1199996     Rural  ...             NaN         10.0         597.0   \n1199997  Suburban  ...             0.0         19.0           NaN   \n1199998  Suburban  ...             1.0          7.0         407.0   \n1199999     Rural  ...             0.0         18.0         502.0   \n\n         Insurance Duration           Policy Start Date Customer Feedback  \\\n0                       5.0  2023-12-23 15:21:39.134960              Poor   \n1                       2.0  2023-06-12 15:21:39.111551           Average   \n2                       3.0  2023-09-30 15:21:39.221386              Good   \n3                       1.0  2024-06-12 15:21:39.226954              Poor   \n4                       4.0  2021-12-01 15:21:39.252145              Poor   \n...                     ...                         ...               ...   \n1199995                 3.0  2023-05-03 15:21:39.257696              Poor   \n1199996                 4.0  2022-09-10 15:21:39.134960              Poor   \n1199997                 6.0  2021-05-25 15:21:39.106582              Good   \n1199998                 4.0  2021-09-19 15:21:39.190215              Poor   \n1199999                 6.0  2020-08-26 15:21:39.155231              Good   \n\n        Smoking Status Exercise Frequency Property Type Premium Amount  \n0                   No             Weekly         House         2869.0  \n1                  Yes            Monthly         House         1483.0  \n2                  Yes             Weekly         House          567.0  \n3                  Yes              Daily     Apartment          765.0  \n4                  Yes             Weekly         House         2022.0  \n...                ...                ...           ...            ...  \n1199995             No              Daily     Apartment         1303.0  \n1199996             No             Weekly     Apartment          821.0  \n1199997             No            Monthly         Condo          371.0  \n1199998             No              Daily     Apartment          596.0  \n1199999            Yes            Monthly         House         2480.0  \n\n[1200000 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Annual Income</th>\n      <th>Marital Status</th>\n      <th>Number of Dependents</th>\n      <th>Education Level</th>\n      <th>Occupation</th>\n      <th>Health Score</th>\n      <th>Location</th>\n      <th>...</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Policy Start Date</th>\n      <th>Customer Feedback</th>\n      <th>Smoking Status</th>\n      <th>Exercise Frequency</th>\n      <th>Property Type</th>\n      <th>Premium Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>19.0</td>\n      <td>Female</td>\n      <td>10049.0</td>\n      <td>Married</td>\n      <td>1.0</td>\n      <td>Bachelor's</td>\n      <td>Self-Employed</td>\n      <td>22.598761</td>\n      <td>Urban</td>\n      <td>...</td>\n      <td>2.0</td>\n      <td>17.0</td>\n      <td>372.0</td>\n      <td>5.0</td>\n      <td>2023-12-23 15:21:39.134960</td>\n      <td>Poor</td>\n      <td>No</td>\n      <td>Weekly</td>\n      <td>House</td>\n      <td>2869.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>39.0</td>\n      <td>Female</td>\n      <td>31678.0</td>\n      <td>Divorced</td>\n      <td>3.0</td>\n      <td>Master's</td>\n      <td>NaN</td>\n      <td>15.569731</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>12.0</td>\n      <td>694.0</td>\n      <td>2.0</td>\n      <td>2023-06-12 15:21:39.111551</td>\n      <td>Average</td>\n      <td>Yes</td>\n      <td>Monthly</td>\n      <td>House</td>\n      <td>1483.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>23.0</td>\n      <td>Male</td>\n      <td>25602.0</td>\n      <td>Divorced</td>\n      <td>3.0</td>\n      <td>High School</td>\n      <td>Self-Employed</td>\n      <td>47.177549</td>\n      <td>Suburban</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>2023-09-30 15:21:39.221386</td>\n      <td>Good</td>\n      <td>Yes</td>\n      <td>Weekly</td>\n      <td>House</td>\n      <td>567.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>21.0</td>\n      <td>Male</td>\n      <td>141855.0</td>\n      <td>Married</td>\n      <td>2.0</td>\n      <td>Bachelor's</td>\n      <td>NaN</td>\n      <td>10.938144</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>367.0</td>\n      <td>1.0</td>\n      <td>2024-06-12 15:21:39.226954</td>\n      <td>Poor</td>\n      <td>Yes</td>\n      <td>Daily</td>\n      <td>Apartment</td>\n      <td>765.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>21.0</td>\n      <td>Male</td>\n      <td>39651.0</td>\n      <td>Single</td>\n      <td>1.0</td>\n      <td>Bachelor's</td>\n      <td>Self-Employed</td>\n      <td>20.376094</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>598.0</td>\n      <td>4.0</td>\n      <td>2021-12-01 15:21:39.252145</td>\n      <td>Poor</td>\n      <td>Yes</td>\n      <td>Weekly</td>\n      <td>House</td>\n      <td>2022.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1199995</th>\n      <td>1199995</td>\n      <td>36.0</td>\n      <td>Female</td>\n      <td>27316.0</td>\n      <td>Married</td>\n      <td>0.0</td>\n      <td>Master's</td>\n      <td>Unemployed</td>\n      <td>13.772907</td>\n      <td>Urban</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>372.0</td>\n      <td>3.0</td>\n      <td>2023-05-03 15:21:39.257696</td>\n      <td>Poor</td>\n      <td>No</td>\n      <td>Daily</td>\n      <td>Apartment</td>\n      <td>1303.0</td>\n    </tr>\n    <tr>\n      <th>1199996</th>\n      <td>1199996</td>\n      <td>54.0</td>\n      <td>Male</td>\n      <td>35786.0</td>\n      <td>Divorced</td>\n      <td>NaN</td>\n      <td>Master's</td>\n      <td>Self-Employed</td>\n      <td>11.483482</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>10.0</td>\n      <td>597.0</td>\n      <td>4.0</td>\n      <td>2022-09-10 15:21:39.134960</td>\n      <td>Poor</td>\n      <td>No</td>\n      <td>Weekly</td>\n      <td>Apartment</td>\n      <td>821.0</td>\n    </tr>\n    <tr>\n      <th>1199997</th>\n      <td>1199997</td>\n      <td>19.0</td>\n      <td>Male</td>\n      <td>51884.0</td>\n      <td>Divorced</td>\n      <td>0.0</td>\n      <td>Master's</td>\n      <td>NaN</td>\n      <td>14.724469</td>\n      <td>Suburban</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>19.0</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>2021-05-25 15:21:39.106582</td>\n      <td>Good</td>\n      <td>No</td>\n      <td>Monthly</td>\n      <td>Condo</td>\n      <td>371.0</td>\n    </tr>\n    <tr>\n      <th>1199998</th>\n      <td>1199998</td>\n      <td>55.0</td>\n      <td>Male</td>\n      <td>NaN</td>\n      <td>Single</td>\n      <td>1.0</td>\n      <td>PhD</td>\n      <td>NaN</td>\n      <td>18.547381</td>\n      <td>Suburban</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>407.0</td>\n      <td>4.0</td>\n      <td>2021-09-19 15:21:39.190215</td>\n      <td>Poor</td>\n      <td>No</td>\n      <td>Daily</td>\n      <td>Apartment</td>\n      <td>596.0</td>\n    </tr>\n    <tr>\n      <th>1199999</th>\n      <td>1199999</td>\n      <td>21.0</td>\n      <td>Female</td>\n      <td>NaN</td>\n      <td>Divorced</td>\n      <td>0.0</td>\n      <td>PhD</td>\n      <td>NaN</td>\n      <td>10.125323</td>\n      <td>Rural</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>18.0</td>\n      <td>502.0</td>\n      <td>6.0</td>\n      <td>2020-08-26 15:21:39.155231</td>\n      <td>Good</td>\n      <td>Yes</td>\n      <td>Monthly</td>\n      <td>House</td>\n      <td>2480.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1200000 rows × 21 columns</p>\n</div>"},"metadata":{}}],"execution_count":129},{"cell_type":"markdown","source":"# Checked outliers, excluded them from train data","metadata":{}},{"cell_type":"code","source":"def check_outliers(df):\n    Q1 = df['Previous Claims'].quantile(0.25)\n    Q3 = df['Previous Claims'].quantile(0.75)\n    IQR = Q3 - Q1\n    \n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    \n    df_cleaned = df[(train_df['Previous Claims'] >= lower_bound) & (df['Previous Claims'] <= upper_bound)]\n    df_outliers = df[(train_df['Previous Claims'] < lower_bound) | (df['Previous Claims'] > upper_bound)]\n\n    return df_cleaned,df_outliers\n\ntrain_df_cleaned, train_df_outliers = check_outliers(train_df)\nprint('number of outliers in train df: ',train_df_outliers['Previous Claims'].count())\nprint(\"Original DataFrame with outliers in train df:\",train_df['Previous Claims'].count())\nprint(\"DataFrame after removing outliers in train df:\",train_df_cleaned['Previous Claims'].count())\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:00.175477Z","iopub.execute_input":"2024-12-31T22:37:00.175718Z","iopub.status.idle":"2024-12-31T22:37:00.384100Z","shell.execute_reply.started":"2024-12-31T22:37:00.175697Z","shell.execute_reply":"2024-12-31T22:37:00.383263Z"}},"outputs":[{"name":"stdout","text":"number of outliers in train df:  369\nOriginal DataFrame with outliers in train df: 835971\nDataFrame after removing outliers in train df: 835602\n","output_type":"stream"}],"execution_count":130},{"cell_type":"code","source":"train_df_cleaned.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:00.385291Z","iopub.execute_input":"2024-12-31T22:37:00.385521Z","iopub.status.idle":"2024-12-31T22:37:00.390134Z","shell.execute_reply.started":"2024-12-31T22:37:00.385503Z","shell.execute_reply":"2024-12-31T22:37:00.389323Z"}},"outputs":[{"execution_count":131,"output_type":"execute_result","data":{"text/plain":"(835602, 21)"},"metadata":{}}],"execution_count":131},{"cell_type":"code","source":"test_df_cleaned=test_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:00.391147Z","iopub.execute_input":"2024-12-31T22:37:00.391405Z","iopub.status.idle":"2024-12-31T22:37:00.466432Z","shell.execute_reply.started":"2024-12-31T22:37:00.391385Z","shell.execute_reply":"2024-12-31T22:37:00.465606Z"}},"outputs":[],"execution_count":132},{"cell_type":"code","source":"test_df_cleaned.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:00.467215Z","iopub.execute_input":"2024-12-31T22:37:00.467429Z","iopub.status.idle":"2024-12-31T22:37:00.471528Z","shell.execute_reply.started":"2024-12-31T22:37:00.467401Z","shell.execute_reply":"2024-12-31T22:37:00.470743Z"}},"outputs":[{"execution_count":133,"output_type":"execute_result","data":{"text/plain":"(800000, 20)"},"metadata":{}}],"execution_count":133},{"cell_type":"markdown","source":"# Summary of cleaned data frames","metadata":{}},{"cell_type":"code","source":"print('\\n cleaned train df stats')\nprint(train_df_cleaned.describe())\nprint('\\n cleaned test df stats')\nprint(test_df_cleaned.describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:00.472318Z","iopub.execute_input":"2024-12-31T22:37:00.472575Z","iopub.status.idle":"2024-12-31T22:37:01.109121Z","shell.execute_reply.started":"2024-12-31T22:37:00.472545Z","shell.execute_reply":"2024-12-31T22:37:01.108386Z"}},"outputs":[{"name":"stdout","text":"\n cleaned train df stats\n                 id            Age  Annual Income  Number of Dependents  \\\ncount  8.356020e+05  822647.000000  803658.000000         758510.000000   \nmean   5.999803e+05      41.133822   33043.037242              2.013376   \nstd    3.463694e+05      13.537680   32655.711592              1.417262   \nmin    0.000000e+00      18.000000       1.000000              0.000000   \n25%    2.999072e+05      30.000000    7765.000000              1.000000   \n50%    5.999345e+05      41.000000   23962.000000              2.000000   \n75%    8.997585e+05      53.000000   44934.000000              3.000000   \nmax    1.199999e+06      64.000000  149997.000000              4.000000   \n\n        Health Score  Previous Claims    Vehicle Age   Credit Score  \\\ncount  784628.000000    835602.000000  835597.000000  738880.000000   \nmean       25.632917         1.000390       9.559620     594.081544   \nstd        12.225718         0.976897       5.776622     149.648098   \nmin         2.012237         0.000000       0.000000     300.000000   \n25%        15.898669         0.000000       5.000000     470.000000   \n50%        24.594439         1.000000      10.000000     596.000000   \n75%        34.593551         2.000000      15.000000     722.000000   \nmax        58.886035         5.000000      19.000000     849.000000   \n\n       Insurance Duration  Premium Amount  \ncount       835601.000000   835602.000000  \nmean             5.014695     1113.584924  \nstd              2.594813      870.255921  \nmin              1.000000       20.000000  \n25%              3.000000      519.000000  \n50%              5.000000      882.000000  \n75%              7.000000     1523.000000  \nmax              9.000000     4999.000000  \n\n cleaned test df stats\n                 id            Age  Annual Income  Number of Dependents  \\\ncount  8.000000e+05  787511.000000  770140.000000         726870.000000   \nmean   1.600000e+06      41.136440   32803.871471              2.009337   \nstd    2.309403e+05      13.537829   32201.063749              1.415241   \nmin    1.200000e+06      18.000000       2.000000              0.000000   \n25%    1.400000e+06      30.000000    8048.000000              1.000000   \n50%    1.600000e+06      41.000000   23981.000000              2.000000   \n75%    1.799999e+06      53.000000   44660.000000              3.000000   \nmax    1.999999e+06      64.000000  149997.000000              4.000000   \n\n        Health Score  Previous Claims    Vehicle Age   Credit Score  \\\ncount  750551.000000    557198.000000  799997.000000  708549.000000   \nmean       25.613036         1.004873       9.571891     592.904749   \nstd        12.206882         0.982803       5.772200     150.116374   \nmin         1.646561         0.000000       0.000000     300.000000   \n25%        15.917353         0.000000       5.000000     468.000000   \n50%        24.580164         1.000000      10.000000     595.000000   \n75%        34.517766         2.000000      15.000000     721.000000   \nmax        57.957351         9.000000      19.000000     849.000000   \n\n       Insurance Duration  \ncount       799998.000000  \nmean             5.018949  \nstd              2.593759  \nmin              1.000000  \n25%              3.000000  \n50%              5.000000  \n75%              7.000000  \nmax              9.000000  \n","output_type":"stream"}],"execution_count":134},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"mean_imputation_cols = ['Age','Number of Dependents','Credit Score','Credit Score']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:01.109877Z","iopub.execute_input":"2024-12-31T22:37:01.110182Z","iopub.status.idle":"2024-12-31T22:37:01.113304Z","shell.execute_reply.started":"2024-12-31T22:37:01.110148Z","shell.execute_reply":"2024-12-31T22:37:01.112494Z"}},"outputs":[],"execution_count":135},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(strategy='mean')\ntrain_df_cleaned[mean_imputation_cols]= imputer.fit_transform(train_df_cleaned[mean_imputation_cols])\ntest_df_cleaned[mean_imputation_cols]= imputer.transform(test_df_cleaned[mean_imputation_cols])\nprint(train_df_cleaned.head(5))\nprint(test_df_cleaned.head(5))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:01.114217Z","iopub.execute_input":"2024-12-31T22:37:01.114704Z","iopub.status.idle":"2024-12-31T22:37:01.262580Z","shell.execute_reply.started":"2024-12-31T22:37:01.114671Z","shell.execute_reply":"2024-12-31T22:37:01.261643Z"}},"outputs":[{"name":"stdout","text":"   id   Age  Gender  Annual Income Marital Status  Number of Dependents  \\\n0   0  19.0  Female        10049.0        Married                   1.0   \n1   1  39.0  Female        31678.0       Divorced                   3.0   \n2   2  23.0    Male        25602.0       Divorced                   3.0   \n3   3  21.0    Male       141855.0        Married                   2.0   \n4   4  21.0    Male        39651.0         Single                   1.0   \n\n  Education Level     Occupation  Health Score  Location  ... Previous Claims  \\\n0      Bachelor's  Self-Employed     22.598761     Urban  ...             2.0   \n1        Master's            NaN     15.569731     Rural  ...             1.0   \n2     High School  Self-Employed     47.177549  Suburban  ...             1.0   \n3      Bachelor's            NaN     10.938144     Rural  ...             1.0   \n4      Bachelor's  Self-Employed     20.376094     Rural  ...             0.0   \n\n   Vehicle Age  Credit Score  Insurance Duration           Policy Start Date  \\\n0         17.0    372.000000                 5.0  2023-12-23 15:21:39.134960   \n1         12.0    694.000000                 2.0  2023-06-12 15:21:39.111551   \n2         14.0    594.081544                 3.0  2023-09-30 15:21:39.221386   \n3          0.0    367.000000                 1.0  2024-06-12 15:21:39.226954   \n4          8.0    598.000000                 4.0  2021-12-01 15:21:39.252145   \n\n  Customer Feedback Smoking Status Exercise Frequency Property Type  \\\n0              Poor             No             Weekly         House   \n1           Average            Yes            Monthly         House   \n2              Good            Yes             Weekly         House   \n3              Poor            Yes              Daily     Apartment   \n4              Poor            Yes             Weekly         House   \n\n  Premium Amount  \n0         2869.0  \n1         1483.0  \n2          567.0  \n3          765.0  \n4         2022.0  \n\n[5 rows x 21 columns]\n        id   Age  Gender  Annual Income Marital Status  Number of Dependents  \\\n0  1200000  28.0  Female         2310.0            NaN                   4.0   \n1  1200001  31.0  Female       126031.0        Married                   2.0   \n2  1200002  47.0  Female        17092.0       Divorced                   0.0   \n3  1200003  28.0  Female        30424.0       Divorced                   3.0   \n4  1200004  24.0    Male        10863.0       Divorced                   2.0   \n\n  Education Level     Occupation  Health Score  Location    Policy Type  \\\n0      Bachelor's  Self-Employed      7.657981     Rural          Basic   \n1        Master's  Self-Employed     13.381379  Suburban        Premium   \n2             PhD     Unemployed     24.354527     Urban  Comprehensive   \n3             PhD  Self-Employed      5.136225  Suburban  Comprehensive   \n4     High School     Unemployed     11.844155  Suburban        Premium   \n\n   Previous Claims  Vehicle Age  Credit Score  Insurance Duration  \\\n0              NaN         19.0    594.081544                 1.0   \n1              NaN         14.0    372.000000                 8.0   \n2              NaN         16.0    819.000000                 9.0   \n3              1.0          3.0    770.000000                 5.0   \n4              NaN         14.0    755.000000                 7.0   \n\n            Policy Start Date Customer Feedback Smoking Status  \\\n0  2023-06-04 15:21:39.245086              Poor            Yes   \n1  2024-04-22 15:21:39.224915              Good            Yes   \n2  2023-04-05 15:21:39.134960           Average            Yes   \n3  2023-10-25 15:21:39.134960              Poor            Yes   \n4  2021-11-26 15:21:39.259788           Average             No   \n\n  Exercise Frequency Property Type  \n0             Weekly         House  \n1             Rarely     Apartment  \n2            Monthly         Condo  \n3              Daily         House  \n4             Weekly         House  \n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-136-28baafd5655f>:6: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_df_cleaned[mean_imputation_cols]= imputer.fit_transform(train_df_cleaned[mean_imputation_cols])\n","output_type":"stream"}],"execution_count":136},{"cell_type":"code","source":"print('\\nchecking missing values for cleaned train df')\ncheck_missing(train_df_cleaned)\nprint('\\nchecking missing values for cleaned test df')\ncheck_missing(test_df_cleaned)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:01.263380Z","iopub.execute_input":"2024-12-31T22:37:01.263679Z","iopub.status.idle":"2024-12-31T22:37:01.986958Z","shell.execute_reply.started":"2024-12-31T22:37:01.263639Z","shell.execute_reply":"2024-12-31T22:37:01.986298Z"}},"outputs":[{"name":"stdout","text":"\nchecking missing values for cleaned train df\nAnnual Income          31944\nMarital Status         13213\nOccupation            249116\nHealth Score           50974\nVehicle Age                5\nInsurance Duration         1\nCustomer Feedback      54935\ndtype: int64\n\n\n\nchecking missing values for cleaned test df\nAnnual Income          29860\nMarital Status         12336\nOccupation            239125\nHealth Score           49449\nPrevious Claims       242802\nVehicle Age                3\nInsurance Duration         2\nCustomer Feedback      52276\ndtype: int64\n\n\n","output_type":"stream"}],"execution_count":137},{"cell_type":"code","source":"mode_imputation_cols=['Annual Income','Health Score','Marital Status','Occupation', 'Customer Feedback']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:01.987755Z","iopub.execute_input":"2024-12-31T22:37:01.987972Z","iopub.status.idle":"2024-12-31T22:37:01.990989Z","shell.execute_reply.started":"2024-12-31T22:37:01.987953Z","shell.execute_reply":"2024-12-31T22:37:01.990284Z"}},"outputs":[],"execution_count":138},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(strategy='most_frequent')\ntrain_df_cleaned[mode_imputation_cols]= imputer.fit_transform(train_df_cleaned[mode_imputation_cols])\ntest_df_cleaned[mode_imputation_cols]= imputer.transform(test_df_cleaned[mode_imputation_cols])\nprint(train_df_cleaned.head(5))\nprint(test_df_cleaned.head(5))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:01.991648Z","iopub.execute_input":"2024-12-31T22:37:01.991826Z","iopub.status.idle":"2024-12-31T22:37:03.620370Z","shell.execute_reply.started":"2024-12-31T22:37:01.991810Z","shell.execute_reply":"2024-12-31T22:37:03.619629Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-139-df35e6945d4f>:6: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_df_cleaned[mode_imputation_cols]= imputer.fit_transform(train_df_cleaned[mode_imputation_cols])\n","output_type":"stream"},{"name":"stdout","text":"   id   Age  Gender Annual Income Marital Status  Number of Dependents  \\\n0   0  19.0  Female       10049.0        Married                   1.0   \n1   1  39.0  Female       31678.0       Divorced                   3.0   \n2   2  23.0    Male       25602.0       Divorced                   3.0   \n3   3  21.0    Male      141855.0        Married                   2.0   \n4   4  21.0    Male       39651.0         Single                   1.0   \n\n  Education Level     Occupation Health Score  Location  ... Previous Claims  \\\n0      Bachelor's  Self-Employed    22.598761     Urban  ...             2.0   \n1        Master's  Self-Employed    15.569731     Rural  ...             1.0   \n2     High School  Self-Employed    47.177549  Suburban  ...             1.0   \n3      Bachelor's  Self-Employed    10.938144     Rural  ...             1.0   \n4      Bachelor's  Self-Employed    20.376094     Rural  ...             0.0   \n\n   Vehicle Age  Credit Score  Insurance Duration           Policy Start Date  \\\n0         17.0    372.000000                 5.0  2023-12-23 15:21:39.134960   \n1         12.0    694.000000                 2.0  2023-06-12 15:21:39.111551   \n2         14.0    594.081544                 3.0  2023-09-30 15:21:39.221386   \n3          0.0    367.000000                 1.0  2024-06-12 15:21:39.226954   \n4          8.0    598.000000                 4.0  2021-12-01 15:21:39.252145   \n\n  Customer Feedback Smoking Status Exercise Frequency Property Type  \\\n0              Poor             No             Weekly         House   \n1           Average            Yes            Monthly         House   \n2              Good            Yes             Weekly         House   \n3              Poor            Yes              Daily     Apartment   \n4              Poor            Yes             Weekly         House   \n\n  Premium Amount  \n0         2869.0  \n1         1483.0  \n2          567.0  \n3          765.0  \n4         2022.0  \n\n[5 rows x 21 columns]\n        id   Age  Gender Annual Income Marital Status  Number of Dependents  \\\n0  1200000  28.0  Female        2310.0         Single                   4.0   \n1  1200001  31.0  Female      126031.0        Married                   2.0   \n2  1200002  47.0  Female       17092.0       Divorced                   0.0   \n3  1200003  28.0  Female       30424.0       Divorced                   3.0   \n4  1200004  24.0    Male       10863.0       Divorced                   2.0   \n\n  Education Level     Occupation Health Score  Location    Policy Type  \\\n0      Bachelor's  Self-Employed     7.657981     Rural          Basic   \n1        Master's  Self-Employed    13.381379  Suburban        Premium   \n2             PhD     Unemployed    24.354527     Urban  Comprehensive   \n3             PhD  Self-Employed     5.136225  Suburban  Comprehensive   \n4     High School     Unemployed    11.844155  Suburban        Premium   \n\n   Previous Claims  Vehicle Age  Credit Score  Insurance Duration  \\\n0              NaN         19.0    594.081544                 1.0   \n1              NaN         14.0    372.000000                 8.0   \n2              NaN         16.0    819.000000                 9.0   \n3              1.0          3.0    770.000000                 5.0   \n4              NaN         14.0    755.000000                 7.0   \n\n            Policy Start Date Customer Feedback Smoking Status  \\\n0  2023-06-04 15:21:39.245086              Poor            Yes   \n1  2024-04-22 15:21:39.224915              Good            Yes   \n2  2023-04-05 15:21:39.134960           Average            Yes   \n3  2023-10-25 15:21:39.134960              Poor            Yes   \n4  2021-11-26 15:21:39.259788           Average             No   \n\n  Exercise Frequency Property Type  \n0             Weekly         House  \n1             Rarely     Apartment  \n2            Monthly         Condo  \n3              Daily         House  \n4             Weekly         House  \n","output_type":"stream"}],"execution_count":139},{"cell_type":"code","source":"print('\\nchecking missing values for cleaned train df')\ncheck_missing(train_df_cleaned)\nprint('\\nchecking missing values for cleaned test df')\ncheck_missing(test_df_cleaned)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:03.621131Z","iopub.execute_input":"2024-12-31T22:37:03.621396Z","iopub.status.idle":"2024-12-31T22:37:04.420723Z","shell.execute_reply.started":"2024-12-31T22:37:03.621375Z","shell.execute_reply":"2024-12-31T22:37:04.420026Z"}},"outputs":[{"name":"stdout","text":"\nchecking missing values for cleaned train df\nVehicle Age           5\nInsurance Duration    1\ndtype: int64\n\n\n\nchecking missing values for cleaned test df\nPrevious Claims       242802\nVehicle Age                3\nInsurance Duration         2\ndtype: int64\n\n\n","output_type":"stream"}],"execution_count":140},{"cell_type":"code","source":"train_df_cleaned = train_df_cleaned.dropna(subset=['Vehicle Age','Insurance Duration'])\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:04.421525Z","iopub.execute_input":"2024-12-31T22:37:04.421833Z","iopub.status.idle":"2024-12-31T22:37:04.631913Z","shell.execute_reply.started":"2024-12-31T22:37:04.421798Z","shell.execute_reply":"2024-12-31T22:37:04.631256Z"}},"outputs":[],"execution_count":141},{"cell_type":"code","source":"#test_df_cleaned = test_df_cleaned.dropna(subset=['Vehicle Age','Insurance Duration'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:35:04.550611Z","iopub.execute_input":"2024-12-31T22:35:04.550896Z","iopub.status.idle":"2024-12-31T22:35:04.689075Z","shell.execute_reply.started":"2024-12-31T22:35:04.550874Z","shell.execute_reply":"2024-12-31T22:35:04.688408Z"}},"outputs":[],"execution_count":122},{"cell_type":"code","source":"test_df_cleaned.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:12.108460Z","iopub.execute_input":"2024-12-31T22:37:12.108743Z","iopub.status.idle":"2024-12-31T22:37:12.113211Z","shell.execute_reply.started":"2024-12-31T22:37:12.108720Z","shell.execute_reply":"2024-12-31T22:37:12.112385Z"}},"outputs":[{"execution_count":142,"output_type":"execute_result","data":{"text/plain":"(800000, 20)"},"metadata":{}}],"execution_count":142},{"cell_type":"code","source":"print('\\nchecking missing values for cleaned train df')\ncheck_missing(train_df_cleaned)\nprint('\\nchecking missing values for cleaned test df')\ncheck_missing(test_df_cleaned)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:16.588691Z","iopub.execute_input":"2024-12-31T22:37:16.588968Z","iopub.status.idle":"2024-12-31T22:37:17.388436Z","shell.execute_reply.started":"2024-12-31T22:37:16.588946Z","shell.execute_reply":"2024-12-31T22:37:17.387756Z"}},"outputs":[{"name":"stdout","text":"\nchecking missing values for cleaned train df\nSeries([], dtype: int64)\n\n\n\nchecking missing values for cleaned test df\nPrevious Claims       242802\nVehicle Age                3\nInsurance Duration         2\ndtype: int64\n\n\n","output_type":"stream"}],"execution_count":143},{"cell_type":"code","source":"train_df_cleaned.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:33:53.044707Z","iopub.execute_input":"2024-12-31T22:33:53.044987Z","iopub.status.idle":"2024-12-31T22:33:53.288917Z","shell.execute_reply.started":"2024-12-31T22:33:53.044965Z","shell.execute_reply":"2024-12-31T22:33:53.288159Z"}},"outputs":[{"execution_count":120,"output_type":"execute_result","data":{"text/plain":"                 id            Age  Number of Dependents  Previous Claims  \\\ncount  8.355960e+05  835596.000000         835596.000000    835596.000000   \nmean   5.999812e+05      41.133787              2.013375         1.000388   \nstd    3.463690e+05      13.432306              1.350305         0.976896   \nmin    0.000000e+00      18.000000              0.000000         0.000000   \n25%    2.999078e+05      30.000000              1.000000         0.000000   \n50%    5.999370e+05      41.133822              2.000000         1.000000   \n75%    8.997592e+05      53.000000              3.000000         2.000000   \nmax    1.199999e+06      64.000000              4.000000         5.000000   \n\n         Vehicle Age   Credit Score  Insurance Duration  Premium Amount  \ncount  835596.000000  835596.000000       835596.000000   835596.000000  \nmean        9.559610     594.081922            5.014704     1113.586324  \nstd         5.776618     140.720824            2.594814      870.258271  \nmin         0.000000     300.000000            1.000000       20.000000  \n25%         5.000000     486.000000            3.000000      519.000000  \n50%        10.000000     594.081544            5.000000      882.000000  \n75%        15.000000     706.000000            7.000000     1523.000000  \nmax        19.000000     849.000000            9.000000     4999.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Age</th>\n      <th>Number of Dependents</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Premium Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>8.355960e+05</td>\n      <td>835596.000000</td>\n      <td>835596.000000</td>\n      <td>835596.000000</td>\n      <td>835596.000000</td>\n      <td>835596.000000</td>\n      <td>835596.000000</td>\n      <td>835596.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.999812e+05</td>\n      <td>41.133787</td>\n      <td>2.013375</td>\n      <td>1.000388</td>\n      <td>9.559610</td>\n      <td>594.081922</td>\n      <td>5.014704</td>\n      <td>1113.586324</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.463690e+05</td>\n      <td>13.432306</td>\n      <td>1.350305</td>\n      <td>0.976896</td>\n      <td>5.776618</td>\n      <td>140.720824</td>\n      <td>2.594814</td>\n      <td>870.258271</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000e+00</td>\n      <td>18.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>300.000000</td>\n      <td>1.000000</td>\n      <td>20.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.999078e+05</td>\n      <td>30.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>5.000000</td>\n      <td>486.000000</td>\n      <td>3.000000</td>\n      <td>519.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>5.999370e+05</td>\n      <td>41.133822</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>10.000000</td>\n      <td>594.081544</td>\n      <td>5.000000</td>\n      <td>882.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>8.997592e+05</td>\n      <td>53.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>15.000000</td>\n      <td>706.000000</td>\n      <td>7.000000</td>\n      <td>1523.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.199999e+06</td>\n      <td>64.000000</td>\n      <td>4.000000</td>\n      <td>5.000000</td>\n      <td>19.000000</td>\n      <td>849.000000</td>\n      <td>9.000000</td>\n      <td>4999.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":120},{"cell_type":"code","source":"train_df_cleaned.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:33:58.897268Z","iopub.execute_input":"2024-12-31T22:33:58.897546Z","iopub.status.idle":"2024-12-31T22:33:58.903154Z","shell.execute_reply.started":"2024-12-31T22:33:58.897523Z","shell.execute_reply":"2024-12-31T22:33:58.902329Z"}},"outputs":[{"execution_count":121,"output_type":"execute_result","data":{"text/plain":"id                        int64\nAge                     float64\nGender                   object\nAnnual Income            object\nMarital Status           object\nNumber of Dependents    float64\nEducation Level          object\nOccupation               object\nHealth Score             object\nLocation                 object\nPolicy Type              object\nPrevious Claims         float64\nVehicle Age             float64\nCredit Score            float64\nInsurance Duration      float64\nPolicy Start Date        object\nCustomer Feedback        object\nSmoking Status           object\nExercise Frequency       object\nProperty Type            object\nPremium Amount          float64\ndtype: object"},"metadata":{}}],"execution_count":121},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder\nencoding_cols=['Customer Feedback','Occupation','Education Level','Marital Status',\n               'Property Type','Exercise Frequency','Smoking Status','Policy Type','Gender','Location']\n\nencoder = OneHotEncoder(sparse=False)\n\ntrain_encoded_array = encoder.fit_transform(train_df_cleaned[encoding_cols])\ntest_encoded_array = encoder.transform(test_df_cleaned[encoding_cols])\n\ntrain_encoded_df = pd.DataFrame(train_encoded_array, columns=encoder.get_feature_names_out(encoding_cols))\ntest_encoded_df = pd.DataFrame(test_encoded_array, columns=encoder.get_feature_names_out(encoding_cols))\n\ntrain_df_cleaned = pd.concat([train_df_cleaned.drop(columns=encoding_cols), train_encoded_df], axis=1)\ntest_df_cleaned = pd.concat([test_df_cleaned.drop(columns=encoding_cols), test_encoded_df], axis=1)\n\nprint(train_df_cleaned.columns)\nprint(test_df_cleaned.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:24.249463Z","iopub.execute_input":"2024-12-31T22:37:24.249761Z","iopub.status.idle":"2024-12-31T22:37:28.864780Z","shell.execute_reply.started":"2024-12-31T22:37:24.249737Z","shell.execute_reply":"2024-12-31T22:37:28.864032Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Index(['id', 'Age', 'Annual Income', 'Number of Dependents', 'Health Score',\n       'Previous Claims', 'Vehicle Age', 'Credit Score', 'Insurance Duration',\n       'Policy Start Date', 'Premium Amount', 'Customer Feedback_Average',\n       'Customer Feedback_Good', 'Customer Feedback_Poor',\n       'Occupation_Employed', 'Occupation_Self-Employed',\n       'Occupation_Unemployed', 'Education Level_Bachelor's',\n       'Education Level_High School', 'Education Level_Master's',\n       'Education Level_PhD', 'Marital Status_Divorced',\n       'Marital Status_Married', 'Marital Status_Single',\n       'Property Type_Apartment', 'Property Type_Condo', 'Property Type_House',\n       'Exercise Frequency_Daily', 'Exercise Frequency_Monthly',\n       'Exercise Frequency_Rarely', 'Exercise Frequency_Weekly',\n       'Smoking Status_No', 'Smoking Status_Yes', 'Policy Type_Basic',\n       'Policy Type_Comprehensive', 'Policy Type_Premium', 'Gender_Female',\n       'Gender_Male', 'Location_Rural', 'Location_Suburban', 'Location_Urban'],\n      dtype='object')\nIndex(['id', 'Age', 'Annual Income', 'Number of Dependents', 'Health Score',\n       'Previous Claims', 'Vehicle Age', 'Credit Score', 'Insurance Duration',\n       'Policy Start Date', 'Customer Feedback_Average',\n       'Customer Feedback_Good', 'Customer Feedback_Poor',\n       'Occupation_Employed', 'Occupation_Self-Employed',\n       'Occupation_Unemployed', 'Education Level_Bachelor's',\n       'Education Level_High School', 'Education Level_Master's',\n       'Education Level_PhD', 'Marital Status_Divorced',\n       'Marital Status_Married', 'Marital Status_Single',\n       'Property Type_Apartment', 'Property Type_Condo', 'Property Type_House',\n       'Exercise Frequency_Daily', 'Exercise Frequency_Monthly',\n       'Exercise Frequency_Rarely', 'Exercise Frequency_Weekly',\n       'Smoking Status_No', 'Smoking Status_Yes', 'Policy Type_Basic',\n       'Policy Type_Comprehensive', 'Policy Type_Premium', 'Gender_Female',\n       'Gender_Male', 'Location_Rural', 'Location_Suburban', 'Location_Urban'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":144},{"cell_type":"code","source":"train_df_cleaned.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:31.924440Z","iopub.execute_input":"2024-12-31T22:37:31.924719Z","iopub.status.idle":"2024-12-31T22:37:31.946154Z","shell.execute_reply.started":"2024-12-31T22:37:31.924698Z","shell.execute_reply":"2024-12-31T22:37:31.945343Z"}},"outputs":[{"execution_count":146,"output_type":"execute_result","data":{"text/plain":"    id   Age Annual Income  Number of Dependents Health Score  \\\n0  0.0  19.0       10049.0                   1.0    22.598761   \n1  1.0  39.0       31678.0                   3.0    15.569731   \n2  2.0  23.0       25602.0                   3.0    47.177549   \n3  3.0  21.0      141855.0                   2.0    10.938144   \n4  4.0  21.0       39651.0                   1.0    20.376094   \n\n   Previous Claims  Vehicle Age  Credit Score  Insurance Duration  \\\n0              2.0         17.0    372.000000                 5.0   \n1              1.0         12.0    694.000000                 2.0   \n2              1.0         14.0    594.081544                 3.0   \n3              1.0          0.0    367.000000                 1.0   \n4              0.0          8.0    598.000000                 4.0   \n\n            Policy Start Date  ...  Smoking Status_No  Smoking Status_Yes  \\\n0  2023-12-23 15:21:39.134960  ...                1.0                 0.0   \n1  2023-06-12 15:21:39.111551  ...                0.0                 1.0   \n2  2023-09-30 15:21:39.221386  ...                0.0                 1.0   \n3  2024-06-12 15:21:39.226954  ...                0.0                 1.0   \n4  2021-12-01 15:21:39.252145  ...                0.0                 1.0   \n\n   Policy Type_Basic  Policy Type_Comprehensive  Policy Type_Premium  \\\n0                0.0                        0.0                  1.0   \n1                0.0                        1.0                  0.0   \n2                0.0                        0.0                  1.0   \n3                1.0                        0.0                  0.0   \n4                0.0                        0.0                  1.0   \n\n   Gender_Female  Gender_Male  Location_Rural  Location_Suburban  \\\n0            1.0          0.0             0.0                0.0   \n1            1.0          0.0             1.0                0.0   \n2            0.0          1.0             0.0                1.0   \n3            0.0          1.0             1.0                0.0   \n4            0.0          1.0             1.0                0.0   \n\n   Location_Urban  \n0             1.0  \n1             0.0  \n2             0.0  \n3             0.0  \n4             0.0  \n\n[5 rows x 41 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Age</th>\n      <th>Annual Income</th>\n      <th>Number of Dependents</th>\n      <th>Health Score</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Policy Start Date</th>\n      <th>...</th>\n      <th>Smoking Status_No</th>\n      <th>Smoking Status_Yes</th>\n      <th>Policy Type_Basic</th>\n      <th>Policy Type_Comprehensive</th>\n      <th>Policy Type_Premium</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Location_Rural</th>\n      <th>Location_Suburban</th>\n      <th>Location_Urban</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>19.0</td>\n      <td>10049.0</td>\n      <td>1.0</td>\n      <td>22.598761</td>\n      <td>2.0</td>\n      <td>17.0</td>\n      <td>372.000000</td>\n      <td>5.0</td>\n      <td>2023-12-23 15:21:39.134960</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>39.0</td>\n      <td>31678.0</td>\n      <td>3.0</td>\n      <td>15.569731</td>\n      <td>1.0</td>\n      <td>12.0</td>\n      <td>694.000000</td>\n      <td>2.0</td>\n      <td>2023-06-12 15:21:39.111551</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2.0</td>\n      <td>23.0</td>\n      <td>25602.0</td>\n      <td>3.0</td>\n      <td>47.177549</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>594.081544</td>\n      <td>3.0</td>\n      <td>2023-09-30 15:21:39.221386</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.0</td>\n      <td>21.0</td>\n      <td>141855.0</td>\n      <td>2.0</td>\n      <td>10.938144</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>367.000000</td>\n      <td>1.0</td>\n      <td>2024-06-12 15:21:39.226954</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.0</td>\n      <td>21.0</td>\n      <td>39651.0</td>\n      <td>1.0</td>\n      <td>20.376094</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>598.000000</td>\n      <td>4.0</td>\n      <td>2021-12-01 15:21:39.252145</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 41 columns</p>\n</div>"},"metadata":{}}],"execution_count":146},{"cell_type":"code","source":"test_df_cleaned.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:37.867756Z","iopub.execute_input":"2024-12-31T22:37:37.868085Z","iopub.status.idle":"2024-12-31T22:37:37.887748Z","shell.execute_reply.started":"2024-12-31T22:37:37.868036Z","shell.execute_reply":"2024-12-31T22:37:37.887116Z"}},"outputs":[{"execution_count":147,"output_type":"execute_result","data":{"text/plain":"        id   Age Annual Income  Number of Dependents Health Score  \\\n0  1200000  28.0        2310.0                   4.0     7.657981   \n1  1200001  31.0      126031.0                   2.0    13.381379   \n2  1200002  47.0       17092.0                   0.0    24.354527   \n3  1200003  28.0       30424.0                   3.0     5.136225   \n4  1200004  24.0       10863.0                   2.0    11.844155   \n\n   Previous Claims  Vehicle Age  Credit Score  Insurance Duration  \\\n0              NaN         19.0    594.081544                 1.0   \n1              NaN         14.0    372.000000                 8.0   \n2              NaN         16.0    819.000000                 9.0   \n3              1.0          3.0    770.000000                 5.0   \n4              NaN         14.0    755.000000                 7.0   \n\n            Policy Start Date  ...  Smoking Status_No  Smoking Status_Yes  \\\n0  2023-06-04 15:21:39.245086  ...                0.0                 1.0   \n1  2024-04-22 15:21:39.224915  ...                0.0                 1.0   \n2  2023-04-05 15:21:39.134960  ...                0.0                 1.0   \n3  2023-10-25 15:21:39.134960  ...                0.0                 1.0   \n4  2021-11-26 15:21:39.259788  ...                1.0                 0.0   \n\n   Policy Type_Basic  Policy Type_Comprehensive  Policy Type_Premium  \\\n0                1.0                        0.0                  0.0   \n1                0.0                        0.0                  1.0   \n2                0.0                        1.0                  0.0   \n3                0.0                        1.0                  0.0   \n4                0.0                        0.0                  1.0   \n\n   Gender_Female  Gender_Male  Location_Rural  Location_Suburban  \\\n0            1.0          0.0             1.0                0.0   \n1            1.0          0.0             0.0                1.0   \n2            1.0          0.0             0.0                0.0   \n3            1.0          0.0             0.0                1.0   \n4            0.0          1.0             0.0                1.0   \n\n   Location_Urban  \n0             0.0  \n1             0.0  \n2             1.0  \n3             0.0  \n4             0.0  \n\n[5 rows x 40 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Age</th>\n      <th>Annual Income</th>\n      <th>Number of Dependents</th>\n      <th>Health Score</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Policy Start Date</th>\n      <th>...</th>\n      <th>Smoking Status_No</th>\n      <th>Smoking Status_Yes</th>\n      <th>Policy Type_Basic</th>\n      <th>Policy Type_Comprehensive</th>\n      <th>Policy Type_Premium</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Location_Rural</th>\n      <th>Location_Suburban</th>\n      <th>Location_Urban</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1200000</td>\n      <td>28.0</td>\n      <td>2310.0</td>\n      <td>4.0</td>\n      <td>7.657981</td>\n      <td>NaN</td>\n      <td>19.0</td>\n      <td>594.081544</td>\n      <td>1.0</td>\n      <td>2023-06-04 15:21:39.245086</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1200001</td>\n      <td>31.0</td>\n      <td>126031.0</td>\n      <td>2.0</td>\n      <td>13.381379</td>\n      <td>NaN</td>\n      <td>14.0</td>\n      <td>372.000000</td>\n      <td>8.0</td>\n      <td>2024-04-22 15:21:39.224915</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1200002</td>\n      <td>47.0</td>\n      <td>17092.0</td>\n      <td>0.0</td>\n      <td>24.354527</td>\n      <td>NaN</td>\n      <td>16.0</td>\n      <td>819.000000</td>\n      <td>9.0</td>\n      <td>2023-04-05 15:21:39.134960</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1200003</td>\n      <td>28.0</td>\n      <td>30424.0</td>\n      <td>3.0</td>\n      <td>5.136225</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>770.000000</td>\n      <td>5.0</td>\n      <td>2023-10-25 15:21:39.134960</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1200004</td>\n      <td>24.0</td>\n      <td>10863.0</td>\n      <td>2.0</td>\n      <td>11.844155</td>\n      <td>NaN</td>\n      <td>14.0</td>\n      <td>755.000000</td>\n      <td>7.0</td>\n      <td>2021-11-26 15:21:39.259788</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 40 columns</p>\n</div>"},"metadata":{}}],"execution_count":147},{"cell_type":"code","source":"train_df_cleaned.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:40.394624Z","iopub.execute_input":"2024-12-31T22:37:40.394999Z","iopub.status.idle":"2024-12-31T22:37:40.402425Z","shell.execute_reply.started":"2024-12-31T22:37:40.394967Z","shell.execute_reply":"2024-12-31T22:37:40.401631Z"}},"outputs":[{"execution_count":148,"output_type":"execute_result","data":{"text/plain":"id                             float64\nAge                            float64\nAnnual Income                   object\nNumber of Dependents           float64\nHealth Score                    object\nPrevious Claims                float64\nVehicle Age                    float64\nCredit Score                   float64\nInsurance Duration             float64\nPolicy Start Date               object\nPremium Amount                 float64\nCustomer Feedback_Average      float64\nCustomer Feedback_Good         float64\nCustomer Feedback_Poor         float64\nOccupation_Employed            float64\nOccupation_Self-Employed       float64\nOccupation_Unemployed          float64\nEducation Level_Bachelor's     float64\nEducation Level_High School    float64\nEducation Level_Master's       float64\nEducation Level_PhD            float64\nMarital Status_Divorced        float64\nMarital Status_Married         float64\nMarital Status_Single          float64\nProperty Type_Apartment        float64\nProperty Type_Condo            float64\nProperty Type_House            float64\nExercise Frequency_Daily       float64\nExercise Frequency_Monthly     float64\nExercise Frequency_Rarely      float64\nExercise Frequency_Weekly      float64\nSmoking Status_No              float64\nSmoking Status_Yes             float64\nPolicy Type_Basic              float64\nPolicy Type_Comprehensive      float64\nPolicy Type_Premium            float64\nGender_Female                  float64\nGender_Male                    float64\nLocation_Rural                 float64\nLocation_Suburban              float64\nLocation_Urban                 float64\ndtype: object"},"metadata":{}}],"execution_count":148},{"cell_type":"code","source":"train_df_cleaned = train_df_cleaned.dropna()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:47.075534Z","iopub.execute_input":"2024-12-31T22:37:47.075842Z","iopub.status.idle":"2024-12-31T22:37:47.330370Z","shell.execute_reply.started":"2024-12-31T22:37:47.075812Z","shell.execute_reply":"2024-12-31T22:37:47.329397Z"}},"outputs":[],"execution_count":149},{"cell_type":"code","source":"train_df_cleaned.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:37:49.187276Z","iopub.execute_input":"2024-12-31T22:37:49.187561Z","iopub.status.idle":"2024-12-31T22:37:50.165313Z","shell.execute_reply.started":"2024-12-31T22:37:49.187537Z","shell.execute_reply":"2024-12-31T22:37:50.164664Z"}},"outputs":[{"execution_count":150,"output_type":"execute_result","data":{"text/plain":"                  id            Age  Number of Dependents  Previous Claims  \\\ncount  581884.000000  581884.000000         581884.000000    581884.000000   \nmean   417834.454536      41.141527              2.013831         0.999955   \nstd    241212.137558      13.433054              1.350569         0.976736   \nmin         0.000000      18.000000              0.000000         0.000000   \n25%    208933.750000      30.000000              1.000000         0.000000   \n50%    417795.500000      41.133822              2.000000         1.000000   \n75%    626883.500000      53.000000              3.000000         2.000000   \nmax    835595.000000      64.000000              4.000000         5.000000   \n\n         Vehicle Age   Credit Score  Insurance Duration  Premium Amount  \\\ncount  581884.000000  581884.000000       581884.000000   581884.000000   \nmean        9.561010     594.010609            5.016130     1113.471011   \nstd         5.775115     140.753756            2.594489      870.936558   \nmin         0.000000     300.000000            1.000000       20.000000   \n25%         5.000000     486.000000            3.000000      518.000000   \n50%        10.000000     594.081544            5.000000      882.000000   \n75%        15.000000     706.000000            7.000000     1523.000000   \nmax        19.000000     849.000000            9.000000     4997.000000   \n\n       Customer Feedback_Average  Customer Feedback_Good  ...  \\\ncount              581884.000000           581884.000000  ...   \nmean                    0.380533                0.307640  ...   \nstd                     0.485518                0.461517  ...   \nmin                     0.000000                0.000000  ...   \n25%                     0.000000                0.000000  ...   \n50%                     0.000000                0.000000  ...   \n75%                     1.000000                1.000000  ...   \nmax                     1.000000                1.000000  ...   \n\n       Smoking Status_No  Smoking Status_Yes  Policy Type_Basic  \\\ncount      581884.000000       581884.000000      581884.000000   \nmean            0.498546            0.501454           0.333551   \nstd             0.499998            0.499998           0.471482   \nmin             0.000000            0.000000           0.000000   \n25%             0.000000            0.000000           0.000000   \n50%             0.000000            1.000000           0.000000   \n75%             1.000000            1.000000           1.000000   \nmax             1.000000            1.000000           1.000000   \n\n       Policy Type_Comprehensive  Policy Type_Premium  Gender_Female  \\\ncount              581884.000000        581884.000000  581884.000000   \nmean                    0.332193             0.334256       0.497637   \nstd                     0.471000             0.471730       0.499995   \nmin                     0.000000             0.000000       0.000000   \n25%                     0.000000             0.000000       0.000000   \n50%                     0.000000             0.000000       0.000000   \n75%                     1.000000             1.000000       1.000000   \nmax                     1.000000             1.000000       1.000000   \n\n         Gender_Male  Location_Rural  Location_Suburban  Location_Urban  \ncount  581884.000000   581884.000000      581884.000000   581884.000000  \nmean        0.502363        0.333426           0.334666        0.331908  \nstd         0.499995        0.471438           0.471874        0.470899  \nmin         0.000000        0.000000           0.000000        0.000000  \n25%         0.000000        0.000000           0.000000        0.000000  \n50%         1.000000        0.000000           0.000000        0.000000  \n75%         1.000000        1.000000           1.000000        1.000000  \nmax         1.000000        1.000000           1.000000        1.000000  \n\n[8 rows x 38 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Age</th>\n      <th>Number of Dependents</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Premium Amount</th>\n      <th>Customer Feedback_Average</th>\n      <th>Customer Feedback_Good</th>\n      <th>...</th>\n      <th>Smoking Status_No</th>\n      <th>Smoking Status_Yes</th>\n      <th>Policy Type_Basic</th>\n      <th>Policy Type_Comprehensive</th>\n      <th>Policy Type_Premium</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Location_Rural</th>\n      <th>Location_Suburban</th>\n      <th>Location_Urban</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>...</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n      <td>581884.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>417834.454536</td>\n      <td>41.141527</td>\n      <td>2.013831</td>\n      <td>0.999955</td>\n      <td>9.561010</td>\n      <td>594.010609</td>\n      <td>5.016130</td>\n      <td>1113.471011</td>\n      <td>0.380533</td>\n      <td>0.307640</td>\n      <td>...</td>\n      <td>0.498546</td>\n      <td>0.501454</td>\n      <td>0.333551</td>\n      <td>0.332193</td>\n      <td>0.334256</td>\n      <td>0.497637</td>\n      <td>0.502363</td>\n      <td>0.333426</td>\n      <td>0.334666</td>\n      <td>0.331908</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>241212.137558</td>\n      <td>13.433054</td>\n      <td>1.350569</td>\n      <td>0.976736</td>\n      <td>5.775115</td>\n      <td>140.753756</td>\n      <td>2.594489</td>\n      <td>870.936558</td>\n      <td>0.485518</td>\n      <td>0.461517</td>\n      <td>...</td>\n      <td>0.499998</td>\n      <td>0.499998</td>\n      <td>0.471482</td>\n      <td>0.471000</td>\n      <td>0.471730</td>\n      <td>0.499995</td>\n      <td>0.499995</td>\n      <td>0.471438</td>\n      <td>0.471874</td>\n      <td>0.470899</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>18.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>300.000000</td>\n      <td>1.000000</td>\n      <td>20.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>208933.750000</td>\n      <td>30.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>5.000000</td>\n      <td>486.000000</td>\n      <td>3.000000</td>\n      <td>518.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>417795.500000</td>\n      <td>41.133822</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>10.000000</td>\n      <td>594.081544</td>\n      <td>5.000000</td>\n      <td>882.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>626883.500000</td>\n      <td>53.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>15.000000</td>\n      <td>706.000000</td>\n      <td>7.000000</td>\n      <td>1523.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>835595.000000</td>\n      <td>64.000000</td>\n      <td>4.000000</td>\n      <td>5.000000</td>\n      <td>19.000000</td>\n      <td>849.000000</td>\n      <td>9.000000</td>\n      <td>4997.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 38 columns</p>\n</div>"},"metadata":{}}],"execution_count":150},{"cell_type":"code","source":"#test_df_cleaned = test_df_cleaned.dropna()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T21:21:43.717033Z","iopub.execute_input":"2024-12-31T21:21:43.717369Z","iopub.status.idle":"2024-12-31T21:21:43.841337Z","shell.execute_reply.started":"2024-12-31T21:21:43.717340Z","shell.execute_reply":"2024-12-31T21:21:43.840624Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"test_df_cleaned.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:00.841743Z","iopub.execute_input":"2024-12-31T22:38:00.842024Z","iopub.status.idle":"2024-12-31T22:38:01.845866Z","shell.execute_reply.started":"2024-12-31T22:38:00.842000Z","shell.execute_reply":"2024-12-31T22:38:01.844968Z"}},"outputs":[{"execution_count":151,"output_type":"execute_result","data":{"text/plain":"                 id            Age  Number of Dependents  Previous Claims  \\\ncount  8.000000e+05  800000.000000         800000.000000    557198.000000   \nmean   1.600000e+06      41.136399              2.009707         1.004873   \nstd    2.309403e+05      13.431742              1.349006         0.982803   \nmin    1.200000e+06      18.000000              0.000000         0.000000   \n25%    1.400000e+06      30.000000              1.000000         0.000000   \n50%    1.600000e+06      41.133822              2.000000         1.000000   \n75%    1.799999e+06      53.000000              3.000000         2.000000   \nmax    1.999999e+06      64.000000              4.000000         9.000000   \n\n         Vehicle Age   Credit Score  Insurance Duration  \\\ncount  799997.000000  800000.000000       799998.000000   \nmean        9.571891     593.039273            5.018949   \nstd         5.772200     141.276363            2.593759   \nmin         0.000000     300.000000            1.000000   \n25%         5.000000     483.000000            3.000000   \n50%        10.000000     594.081544            5.000000   \n75%        15.000000     706.000000            7.000000   \nmax        19.000000     849.000000            9.000000   \n\n       Customer Feedback_Average  Customer Feedback_Good  \\\ncount              800000.000000           800000.000000   \nmean                    0.379366                0.307591   \nstd                     0.485230                0.461497   \nmin                     0.000000                0.000000   \n25%                     0.000000                0.000000   \n50%                     0.000000                0.000000   \n75%                     1.000000                1.000000   \nmax                     1.000000                1.000000   \n\n       Customer Feedback_Poor  ...  Smoking Status_No  Smoking Status_Yes  \\\ncount           800000.000000  ...      800000.000000       800000.000000   \nmean                 0.313043  ...           0.497676            0.502324   \nstd                  0.463732  ...           0.499995            0.499995   \nmin                  0.000000  ...           0.000000            0.000000   \n25%                  0.000000  ...           0.000000            0.000000   \n50%                  0.000000  ...           0.000000            1.000000   \n75%                  1.000000  ...           1.000000            1.000000   \nmax                  1.000000  ...           1.000000            1.000000   \n\n       Policy Type_Basic  Policy Type_Comprehensive  Policy Type_Premium  \\\ncount      800000.000000              800000.000000        800000.000000   \nmean            0.332686                   0.332778             0.334536   \nstd             0.471176                   0.471208             0.471828   \nmin             0.000000                   0.000000             0.000000   \n25%             0.000000                   0.000000             0.000000   \n50%             0.000000                   0.000000             0.000000   \n75%             1.000000                   1.000000             1.000000   \nmax             1.000000                   1.000000             1.000000   \n\n       Gender_Female    Gender_Male  Location_Rural  Location_Suburban  \\\ncount  800000.000000  800000.000000   800000.000000      800000.000000   \nmean        0.498639       0.501361        0.333900           0.333987   \nstd         0.499998       0.499998        0.471605           0.471636   \nmin         0.000000       0.000000        0.000000           0.000000   \n25%         0.000000       0.000000        0.000000           0.000000   \n50%         0.000000       1.000000        0.000000           0.000000   \n75%         1.000000       1.000000        1.000000           1.000000   \nmax         1.000000       1.000000        1.000000           1.000000   \n\n       Location_Urban  \ncount   800000.000000  \nmean         0.332112  \nstd          0.470971  \nmin          0.000000  \n25%          0.000000  \n50%          0.000000  \n75%          1.000000  \nmax          1.000000  \n\n[8 rows x 37 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Age</th>\n      <th>Number of Dependents</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Customer Feedback_Average</th>\n      <th>Customer Feedback_Good</th>\n      <th>Customer Feedback_Poor</th>\n      <th>...</th>\n      <th>Smoking Status_No</th>\n      <th>Smoking Status_Yes</th>\n      <th>Policy Type_Basic</th>\n      <th>Policy Type_Comprehensive</th>\n      <th>Policy Type_Premium</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Location_Rural</th>\n      <th>Location_Suburban</th>\n      <th>Location_Urban</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>8.000000e+05</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>557198.000000</td>\n      <td>799997.000000</td>\n      <td>800000.000000</td>\n      <td>799998.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>...</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n      <td>800000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.600000e+06</td>\n      <td>41.136399</td>\n      <td>2.009707</td>\n      <td>1.004873</td>\n      <td>9.571891</td>\n      <td>593.039273</td>\n      <td>5.018949</td>\n      <td>0.379366</td>\n      <td>0.307591</td>\n      <td>0.313043</td>\n      <td>...</td>\n      <td>0.497676</td>\n      <td>0.502324</td>\n      <td>0.332686</td>\n      <td>0.332778</td>\n      <td>0.334536</td>\n      <td>0.498639</td>\n      <td>0.501361</td>\n      <td>0.333900</td>\n      <td>0.333987</td>\n      <td>0.332112</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.309403e+05</td>\n      <td>13.431742</td>\n      <td>1.349006</td>\n      <td>0.982803</td>\n      <td>5.772200</td>\n      <td>141.276363</td>\n      <td>2.593759</td>\n      <td>0.485230</td>\n      <td>0.461497</td>\n      <td>0.463732</td>\n      <td>...</td>\n      <td>0.499995</td>\n      <td>0.499995</td>\n      <td>0.471176</td>\n      <td>0.471208</td>\n      <td>0.471828</td>\n      <td>0.499998</td>\n      <td>0.499998</td>\n      <td>0.471605</td>\n      <td>0.471636</td>\n      <td>0.470971</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.200000e+06</td>\n      <td>18.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>300.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.400000e+06</td>\n      <td>30.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>5.000000</td>\n      <td>483.000000</td>\n      <td>3.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.600000e+06</td>\n      <td>41.133822</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>10.000000</td>\n      <td>594.081544</td>\n      <td>5.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.799999e+06</td>\n      <td>53.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>15.000000</td>\n      <td>706.000000</td>\n      <td>7.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.999999e+06</td>\n      <td>64.000000</td>\n      <td>4.000000</td>\n      <td>9.000000</td>\n      <td>19.000000</td>\n      <td>849.000000</td>\n      <td>9.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 37 columns</p>\n</div>"},"metadata":{}}],"execution_count":151},{"cell_type":"code","source":"train_df_cleaned['Number of Dependents'] = train_df_cleaned['Number of Dependents'].astype('int32')\ntest_df_cleaned['Number of Dependents'] = test_df_cleaned['Number of Dependents'].astype('int32')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:08.778385Z","iopub.execute_input":"2024-12-31T22:38:08.778671Z","iopub.status.idle":"2024-12-31T22:38:08.786588Z","shell.execute_reply.started":"2024-12-31T22:38:08.778639Z","shell.execute_reply":"2024-12-31T22:38:08.785947Z"}},"outputs":[],"execution_count":152},{"cell_type":"code","source":"train_df_cleaned['id'] = train_df_cleaned['id'].astype('int32')\ntest_df_cleaned['id'] = test_df_cleaned['id'].astype('int32')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:13.466239Z","iopub.execute_input":"2024-12-31T22:38:13.466519Z","iopub.status.idle":"2024-12-31T22:38:13.473456Z","shell.execute_reply.started":"2024-12-31T22:38:13.466498Z","shell.execute_reply":"2024-12-31T22:38:13.472782Z"}},"outputs":[],"execution_count":153},{"cell_type":"code","source":"train_df_cleaned['Policy Start Date'] = train_df_cleaned['Policy Start Date'].astype('datetime64[ns]')\ntest_df_cleaned['Policy Start Date'] = test_df_cleaned['Policy Start Date'].astype('datetime64[ns]')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:15.970817Z","iopub.execute_input":"2024-12-31T22:38:15.971143Z","iopub.status.idle":"2024-12-31T22:38:16.403880Z","shell.execute_reply.started":"2024-12-31T22:38:15.971117Z","shell.execute_reply":"2024-12-31T22:38:16.403208Z"}},"outputs":[],"execution_count":154},{"cell_type":"code","source":"train_df_cleaned['Annual Income'] = train_df_cleaned['Annual Income'].astype('float64')\ntest_df_cleaned['Annual Income'] = test_df_cleaned['Annual Income'].astype('float64')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:17.337571Z","iopub.execute_input":"2024-12-31T22:38:17.337840Z","iopub.status.idle":"2024-12-31T22:38:17.384468Z","shell.execute_reply.started":"2024-12-31T22:38:17.337818Z","shell.execute_reply":"2024-12-31T22:38:17.383812Z"}},"outputs":[],"execution_count":155},{"cell_type":"code","source":"train_df_cleaned['Health Score'] = train_df_cleaned['Health Score'].astype('float64')\ntest_df_cleaned['Health Score'] = test_df_cleaned['Health Score'].astype('float64')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:19.156540Z","iopub.execute_input":"2024-12-31T22:38:19.156873Z","iopub.status.idle":"2024-12-31T22:38:19.197993Z","shell.execute_reply.started":"2024-12-31T22:38:19.156844Z","shell.execute_reply":"2024-12-31T22:38:19.197130Z"}},"outputs":[],"execution_count":156},{"cell_type":"code","source":"train_df_cleaned.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:21.272158Z","iopub.execute_input":"2024-12-31T22:38:21.272432Z","iopub.status.idle":"2024-12-31T22:38:21.278423Z","shell.execute_reply.started":"2024-12-31T22:38:21.272411Z","shell.execute_reply":"2024-12-31T22:38:21.277749Z"}},"outputs":[{"execution_count":157,"output_type":"execute_result","data":{"text/plain":"id                                      int32\nAge                                   float64\nAnnual Income                         float64\nNumber of Dependents                    int32\nHealth Score                          float64\nPrevious Claims                       float64\nVehicle Age                           float64\nCredit Score                          float64\nInsurance Duration                    float64\nPolicy Start Date              datetime64[ns]\nPremium Amount                        float64\nCustomer Feedback_Average             float64\nCustomer Feedback_Good                float64\nCustomer Feedback_Poor                float64\nOccupation_Employed                   float64\nOccupation_Self-Employed              float64\nOccupation_Unemployed                 float64\nEducation Level_Bachelor's            float64\nEducation Level_High School           float64\nEducation Level_Master's              float64\nEducation Level_PhD                   float64\nMarital Status_Divorced               float64\nMarital Status_Married                float64\nMarital Status_Single                 float64\nProperty Type_Apartment               float64\nProperty Type_Condo                   float64\nProperty Type_House                   float64\nExercise Frequency_Daily              float64\nExercise Frequency_Monthly            float64\nExercise Frequency_Rarely             float64\nExercise Frequency_Weekly             float64\nSmoking Status_No                     float64\nSmoking Status_Yes                    float64\nPolicy Type_Basic                     float64\nPolicy Type_Comprehensive             float64\nPolicy Type_Premium                   float64\nGender_Female                         float64\nGender_Male                           float64\nLocation_Rural                        float64\nLocation_Suburban                     float64\nLocation_Urban                        float64\ndtype: object"},"metadata":{}}],"execution_count":157},{"cell_type":"code","source":"test_df_cleaned.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:25.975687Z","iopub.execute_input":"2024-12-31T22:38:25.975967Z","iopub.status.idle":"2024-12-31T22:38:25.981625Z","shell.execute_reply.started":"2024-12-31T22:38:25.975946Z","shell.execute_reply":"2024-12-31T22:38:25.980926Z"}},"outputs":[{"execution_count":158,"output_type":"execute_result","data":{"text/plain":"id                                      int32\nAge                                   float64\nAnnual Income                         float64\nNumber of Dependents                    int32\nHealth Score                          float64\nPrevious Claims                       float64\nVehicle Age                           float64\nCredit Score                          float64\nInsurance Duration                    float64\nPolicy Start Date              datetime64[ns]\nCustomer Feedback_Average             float64\nCustomer Feedback_Good                float64\nCustomer Feedback_Poor                float64\nOccupation_Employed                   float64\nOccupation_Self-Employed              float64\nOccupation_Unemployed                 float64\nEducation Level_Bachelor's            float64\nEducation Level_High School           float64\nEducation Level_Master's              float64\nEducation Level_PhD                   float64\nMarital Status_Divorced               float64\nMarital Status_Married                float64\nMarital Status_Single                 float64\nProperty Type_Apartment               float64\nProperty Type_Condo                   float64\nProperty Type_House                   float64\nExercise Frequency_Daily              float64\nExercise Frequency_Monthly            float64\nExercise Frequency_Rarely             float64\nExercise Frequency_Weekly             float64\nSmoking Status_No                     float64\nSmoking Status_Yes                    float64\nPolicy Type_Basic                     float64\nPolicy Type_Comprehensive             float64\nPolicy Type_Premium                   float64\nGender_Female                         float64\nGender_Male                           float64\nLocation_Rural                        float64\nLocation_Suburban                     float64\nLocation_Urban                        float64\ndtype: object"},"metadata":{}}],"execution_count":158},{"cell_type":"code","source":"skewed_cols=['Annual Income','Health Score','Premium Amount']\n\ntrain_df_cleaned['Annual Income'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:30.021225Z","iopub.execute_input":"2024-12-31T22:38:30.021548Z","iopub.status.idle":"2024-12-31T22:38:30.046704Z","shell.execute_reply.started":"2024-12-31T22:38:30.021520Z","shell.execute_reply":"2024-12-31T22:38:30.045853Z"}},"outputs":[{"execution_count":159,"output_type":"execute_result","data":{"text/plain":"count    581884.000000\nmean      32418.311999\nstd       32210.845765\nmin           2.000000\n25%        8072.000000\n50%       22162.000000\n75%       44296.250000\nmax      149997.000000\nName: Annual Income, dtype: float64"},"metadata":{}}],"execution_count":159},{"cell_type":"code","source":"features=train_df_cleaned.columns.tolist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:32.335492Z","iopub.execute_input":"2024-12-31T22:38:32.335812Z","iopub.status.idle":"2024-12-31T22:38:32.338987Z","shell.execute_reply.started":"2024-12-31T22:38:32.335784Z","shell.execute_reply":"2024-12-31T22:38:32.338322Z"}},"outputs":[],"execution_count":160},{"cell_type":"code","source":"features.remove('Premium Amount')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:33.658308Z","iopub.execute_input":"2024-12-31T22:38:33.658591Z","iopub.status.idle":"2024-12-31T22:38:33.661845Z","shell.execute_reply.started":"2024-12-31T22:38:33.658568Z","shell.execute_reply":"2024-12-31T22:38:33.661073Z"}},"outputs":[],"execution_count":161},{"cell_type":"code","source":"features.remove('Policy Start Date')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:35.064847Z","iopub.execute_input":"2024-12-31T22:38:35.065168Z","iopub.status.idle":"2024-12-31T22:38:35.068207Z","shell.execute_reply.started":"2024-12-31T22:38:35.065140Z","shell.execute_reply":"2024-12-31T22:38:35.067424Z"}},"outputs":[],"execution_count":162},{"cell_type":"code","source":"target='Premium Amount'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:36.416805Z","iopub.execute_input":"2024-12-31T22:38:36.417147Z","iopub.status.idle":"2024-12-31T22:38:36.420448Z","shell.execute_reply.started":"2024-12-31T22:38:36.417118Z","shell.execute_reply":"2024-12-31T22:38:36.419581Z"}},"outputs":[],"execution_count":163},{"cell_type":"code","source":"from sklearn.model_selection import KFold\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.ensemble import GradientBoostingRegressor, HistGradientBoostingRegressor\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost as cb\nimport numpy as np\nimport pandas as pd\n\n# Define the dataset\nX = train_df_cleaned[features]  # All feature columns\ny = train_df_cleaned[target]    # Target column\n\n# Define skewed and non-skewed columns\nskewed_cols = ['Annual Income','Health Score']  # List of skewed features\nnon_skewed_cols = [col for col in X.columns if col not in skewed_cols]\n\n# Set up models\nmodels = {\n    'Gradient Boosting Regressor': HistGradientBoostingRegressor(random_state=42, max_iter=100),\n    'XGBoost': xgb.XGBRegressor(n_jobs=-1, random_state=42, verbosity=0),\n    'LightGBM': lgb.LGBMRegressor(n_jobs=-1, random_state=42),\n    'CatBoost': cb.CatBoostRegressor(learning_rate=0.1, depth=6, iterations=100, verbose=0, random_state=42),\n}\n\n# Set up K-Fold Cross-Validation\nkfold = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Placeholder for results\nresults = {}\n\n# Loop through models\nfor model_name, model in models.items():\n    print(f\"Evaluating {model_name}...\")\n    \n    # Placeholder for fold-wise RMSEs\n    fold_rmlse = []\n    \n    # Loop through folds\n    for train_idx, val_idx in kfold.split(X, y):\n        # Split data\n        X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n        y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n\n        # Transform skewed features\n        pt_features = PowerTransformer(method='yeo-johnson')\n        X_train_skewed = pt_features.fit_transform(X_train[skewed_cols])\n        X_val_skewed = pt_features.transform(X_val[skewed_cols])\n\n        # Transform the target\n        pt_target = PowerTransformer(method='yeo-johnson')\n        y_train_transformed = pt_target.fit_transform(y_train.values.reshape(-1, 1)).flatten()\n        y_val_transformed = pt_target.transform(y_val.values.reshape(-1, 1)).flatten()\n\n        # Combine transformed skewed features and non-skewed features\n        X_train_combined = np.hstack((X_train_skewed, X_train[non_skewed_cols].values))\n        X_val_combined = np.hstack((X_val_skewed, X_val[non_skewed_cols].values))\n\n        # Train the model\n        model.fit(X_train_combined, y_train_transformed)\n\n        # Predict on validation set\n        y_pred_transformed = model.predict(X_val_combined)\n\n        # Inverse-transform predictions to original target scale\n        y_pred_original = pt_target.inverse_transform(y_pred_transformed.reshape(-1, 1)).flatten()\n\n        # Compute RMSE in the original target space\n        rmlse = np.sqrt(mean_squared_log_error(y_val, y_pred_original))\n        fold_rmlse.append(rmlse)\n    \n    # Store results for the current model\n    results[model_name] = {\n        'Fold RMLSEs': fold_rmlse,\n        'Mean RMLSE': np.mean(fold_rmlse),\n        'Std RMLSE': np.std(fold_rmlse),\n    }\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:38:38.712859Z","iopub.execute_input":"2024-12-31T22:38:38.713210Z","iopub.status.idle":"2024-12-31T22:39:54.126102Z","shell.execute_reply.started":"2024-12-31T22:38:38.713182Z","shell.execute_reply":"2024-12-31T22:39:54.125399Z"}},"outputs":[{"name":"stdout","text":"Evaluating Gradient Boosting Regressor...\nEvaluating XGBoost...\nEvaluating LightGBM...\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.012287 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 1165\n[LightGBM] [Info] Number of data points in the train set: 465507, number of used features: 39\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.012211 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 1167\n[LightGBM] [Info] Number of data points in the train set: 465507, number of used features: 39\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.012308 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 1167\n[LightGBM] [Info] Number of data points in the train set: 465507, number of used features: 39\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.012236 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 1167\n[LightGBM] [Info] Number of data points in the train set: 465507, number of used features: 39\n[LightGBM] [Info] Start training from score -0.000000\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.012504 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 1167\n[LightGBM] [Info] Number of data points in the train set: 465508, number of used features: 39\n[LightGBM] [Info] Start training from score -0.000000\nEvaluating CatBoost...\n","output_type":"stream"}],"execution_count":164},{"cell_type":"code","source":"# Display Results\nfor model_name, metrics in results.items():\n    print(f\"\\n{model_name}\")\n    print(f\"  Fold RMLSEs: {metrics['Fold RMLSEs']}\")\n    print(f\"  Mean RMLSE: {metrics['Mean RMLSE']:.4f}\")\n    print(f\"  Std RMLSE: {metrics['Std RMLSE']:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:42:22.818923Z","iopub.execute_input":"2024-12-31T22:42:22.819327Z","iopub.status.idle":"2024-12-31T22:42:22.825689Z","shell.execute_reply.started":"2024-12-31T22:42:22.819294Z","shell.execute_reply":"2024-12-31T22:42:22.824973Z"}},"outputs":[{"name":"stdout","text":"\nGradient Boosting Regressor\n  Fold RMLSEs: [1.0863334297533809, 1.0872582458572915, 1.088315904874147, 1.0836579080375321, 1.0918630549824342]\n  Mean RMLSE: 1.0875\n  Std RMLSE: 0.0027\n\nXGBoost\n  Fold RMLSEs: [1.088779756200334, 1.0882072624581032, 1.089035104958721, 1.0843385323960848, 1.0929259238398068]\n  Mean RMLSE: 1.0887\n  Std RMLSE: 0.0027\n\nLightGBM\n  Fold RMLSEs: [1.0860798883585412, 1.0860503154741168, 1.0874915081918906, 1.082622751219365, 1.091285344171654]\n  Mean RMLSE: 1.0867\n  Std RMLSE: 0.0028\n\nCatBoost\n  Fold RMLSEs: [1.087552039114638, 1.088501120122013, 1.089459113491653, 1.0844799677900698, 1.0935489912307261]\n  Mean RMLSE: 1.0887\n  Std RMLSE: 0.0029\n","output_type":"stream"}],"execution_count":166},{"cell_type":"markdown","source":"# Finding best model based on mean RMLSE scores of cv","metadata":{}},{"cell_type":"code","source":"\nbest_model_name = min(results, key=lambda x: results[x]['Mean RMLSE'])\nbest_model = models[best_model_name]\n\nprint(f\"Best model based on RMLSE: {best_model_name}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:42:32.918793Z","iopub.execute_input":"2024-12-31T22:42:32.919140Z","iopub.status.idle":"2024-12-31T22:42:32.923488Z","shell.execute_reply.started":"2024-12-31T22:42:32.919110Z","shell.execute_reply":"2024-12-31T22:42:32.922824Z"}},"outputs":[{"name":"stdout","text":"Best model based on RMLSE: LightGBM\n","output_type":"stream"}],"execution_count":167},{"cell_type":"markdown","source":"# Model training on  Best model- LightGBM regressor","metadata":{}},{"cell_type":"code","source":"pt_features = PowerTransformer(method='yeo-johnson')\nX_train_skewed = pt_features.fit_transform(X[skewed_cols])\n\npt_target = PowerTransformer(method='yeo-johnson')\ny_train_transformed = pt_target.fit_transform(y.values.reshape(-1, 1)).flatten()\n\nX_train_combined = np.hstack((X_train_skewed, X[non_skewed_cols].values))\nbest_model.fit(X_train_combined, y_train_transformed)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T21:55:34.872020Z","iopub.execute_input":"2024-12-31T21:55:34.872369Z","iopub.status.idle":"2024-12-31T21:55:38.111199Z","shell.execute_reply.started":"2024-12-31T21:55:34.872333Z","shell.execute_reply":"2024-12-31T21:55:38.110445Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.015061 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 1167\n[LightGBM] [Info] Number of data points in the train set: 581884, number of used features: 39\n[LightGBM] [Info] Start training from score -0.000000\n","output_type":"stream"},{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"LGBMRegressor(n_jobs=-1, random_state=42)","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMRegressor(n_jobs=-1, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMRegressor</label><div class=\"sk-toggleable__content\"><pre>LGBMRegressor(n_jobs=-1, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":65},{"cell_type":"markdown","source":"# Test data","metadata":{}},{"cell_type":"code","source":"test_df_cleaned.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:42:43.279697Z","iopub.execute_input":"2024-12-31T22:42:43.279976Z","iopub.status.idle":"2024-12-31T22:42:43.301465Z","shell.execute_reply.started":"2024-12-31T22:42:43.279954Z","shell.execute_reply":"2024-12-31T22:42:43.300653Z"}},"outputs":[{"execution_count":168,"output_type":"execute_result","data":{"text/plain":"        id   Age  Annual Income  Number of Dependents  Health Score  \\\n0  1200000  28.0         2310.0                     4      7.657981   \n1  1200001  31.0       126031.0                     2     13.381379   \n2  1200002  47.0        17092.0                     0     24.354527   \n3  1200003  28.0        30424.0                     3      5.136225   \n4  1200004  24.0        10863.0                     2     11.844155   \n\n   Previous Claims  Vehicle Age  Credit Score  Insurance Duration  \\\n0              NaN         19.0    594.081544                 1.0   \n1              NaN         14.0    372.000000                 8.0   \n2              NaN         16.0    819.000000                 9.0   \n3              1.0          3.0    770.000000                 5.0   \n4              NaN         14.0    755.000000                 7.0   \n\n           Policy Start Date  ...  Smoking Status_No  Smoking Status_Yes  \\\n0 2023-06-04 15:21:39.245086  ...                0.0                 1.0   \n1 2024-04-22 15:21:39.224915  ...                0.0                 1.0   \n2 2023-04-05 15:21:39.134960  ...                0.0                 1.0   \n3 2023-10-25 15:21:39.134960  ...                0.0                 1.0   \n4 2021-11-26 15:21:39.259788  ...                1.0                 0.0   \n\n   Policy Type_Basic  Policy Type_Comprehensive  Policy Type_Premium  \\\n0                1.0                        0.0                  0.0   \n1                0.0                        0.0                  1.0   \n2                0.0                        1.0                  0.0   \n3                0.0                        1.0                  0.0   \n4                0.0                        0.0                  1.0   \n\n   Gender_Female  Gender_Male  Location_Rural  Location_Suburban  \\\n0            1.0          0.0             1.0                0.0   \n1            1.0          0.0             0.0                1.0   \n2            1.0          0.0             0.0                0.0   \n3            1.0          0.0             0.0                1.0   \n4            0.0          1.0             0.0                1.0   \n\n   Location_Urban  \n0             0.0  \n1             0.0  \n2             1.0  \n3             0.0  \n4             0.0  \n\n[5 rows x 40 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Age</th>\n      <th>Annual Income</th>\n      <th>Number of Dependents</th>\n      <th>Health Score</th>\n      <th>Previous Claims</th>\n      <th>Vehicle Age</th>\n      <th>Credit Score</th>\n      <th>Insurance Duration</th>\n      <th>Policy Start Date</th>\n      <th>...</th>\n      <th>Smoking Status_No</th>\n      <th>Smoking Status_Yes</th>\n      <th>Policy Type_Basic</th>\n      <th>Policy Type_Comprehensive</th>\n      <th>Policy Type_Premium</th>\n      <th>Gender_Female</th>\n      <th>Gender_Male</th>\n      <th>Location_Rural</th>\n      <th>Location_Suburban</th>\n      <th>Location_Urban</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1200000</td>\n      <td>28.0</td>\n      <td>2310.0</td>\n      <td>4</td>\n      <td>7.657981</td>\n      <td>NaN</td>\n      <td>19.0</td>\n      <td>594.081544</td>\n      <td>1.0</td>\n      <td>2023-06-04 15:21:39.245086</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1200001</td>\n      <td>31.0</td>\n      <td>126031.0</td>\n      <td>2</td>\n      <td>13.381379</td>\n      <td>NaN</td>\n      <td>14.0</td>\n      <td>372.000000</td>\n      <td>8.0</td>\n      <td>2024-04-22 15:21:39.224915</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1200002</td>\n      <td>47.0</td>\n      <td>17092.0</td>\n      <td>0</td>\n      <td>24.354527</td>\n      <td>NaN</td>\n      <td>16.0</td>\n      <td>819.000000</td>\n      <td>9.0</td>\n      <td>2023-04-05 15:21:39.134960</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1200003</td>\n      <td>28.0</td>\n      <td>30424.0</td>\n      <td>3</td>\n      <td>5.136225</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>770.000000</td>\n      <td>5.0</td>\n      <td>2023-10-25 15:21:39.134960</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1200004</td>\n      <td>24.0</td>\n      <td>10863.0</td>\n      <td>2</td>\n      <td>11.844155</td>\n      <td>NaN</td>\n      <td>14.0</td>\n      <td>755.000000</td>\n      <td>7.0</td>\n      <td>2021-11-26 15:21:39.259788</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 40 columns</p>\n</div>"},"metadata":{}}],"execution_count":168},{"cell_type":"markdown","source":"# Predictions on test data using Light GBM model","metadata":{}},{"cell_type":"code","source":"# Step 3: Apply transformations to the test dataset\nX_test = test_df_cleaned[features]  # Test features\n\n\n# Transform skewed features in test data\nX_test_skewed = pt_features.transform(X_test[skewed_cols])\n\n# Combine transformed skewed features and non-skewed features\nX_test_combined = np.hstack((X_test_skewed, X_test[non_skewed_cols].values))\n\n# Step 4: Make predictions\ny_pred_transformed = best_model.predict(X_test_combined)\n\n# Step 5: Inverse-transform predictions to the original scale\ny_pred_original = pt_target.inverse_transform(y_pred_transformed.reshape(-1, 1)).flatten()\n\n\n# Step 6: Save predictions\n\npredictions_df = pd.DataFrame({\n    'id': test_df_cleaned['id'],  # Replace 'ID' with your actual ID column name\n    'Premium Amount': y_pred_original\n})\n\n# Save the predictions to a CSV file\npredictions_df.to_csv('test_predictions.csv', index=False)\n\nprint(\"Predictions saved to 'test_predictions.csv'\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:42:52.720448Z","iopub.execute_input":"2024-12-31T22:42:52.720761Z","iopub.status.idle":"2024-12-31T22:42:56.555608Z","shell.execute_reply.started":"2024-12-31T22:42:52.720732Z","shell.execute_reply":"2024-12-31T22:42:56.554704Z"}},"outputs":[{"name":"stdout","text":"Predictions saved to 'test_predictions.csv'\n","output_type":"stream"}],"execution_count":169},{"cell_type":"code","source":"predictions_df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:43:08.399976Z","iopub.execute_input":"2024-12-31T22:43:08.400326Z","iopub.status.idle":"2024-12-31T22:43:08.404747Z","shell.execute_reply.started":"2024-12-31T22:43:08.400297Z","shell.execute_reply":"2024-12-31T22:43:08.404121Z"}},"outputs":[{"execution_count":171,"output_type":"execute_result","data":{"text/plain":"(800000, 2)"},"metadata":{}}],"execution_count":171},{"cell_type":"code","source":"predictions_df.head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:43:13.569527Z","iopub.execute_input":"2024-12-31T22:43:13.569808Z","iopub.status.idle":"2024-12-31T22:43:13.576920Z","shell.execute_reply.started":"2024-12-31T22:43:13.569785Z","shell.execute_reply":"2024-12-31T22:43:13.576149Z"}},"outputs":[{"execution_count":172,"output_type":"execute_result","data":{"text/plain":"        id  Premium Amount\n0  1200000     1018.214897\n1  1200001      991.330008\n2  1200002      910.942097\n3  1200003      959.457644\n4  1200004      882.761098","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Premium Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1200000</td>\n      <td>1018.214897</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1200001</td>\n      <td>991.330008</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1200002</td>\n      <td>910.942097</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1200003</td>\n      <td>959.457644</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1200004</td>\n      <td>882.761098</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":172},{"cell_type":"code","source":"check_test_df_cleaned= test_df_cleaned\ncheck_train_df_cleaned= train_df_cleaned","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T22:42:11.579653Z","iopub.execute_input":"2024-12-31T22:42:11.579943Z","iopub.status.idle":"2024-12-31T22:42:11.583143Z","shell.execute_reply.started":"2024-12-31T22:42:11.579921Z","shell.execute_reply":"2024-12-31T22:42:11.582432Z"}},"outputs":[],"execution_count":165},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import boxcox, yeojohnson\nfrom scipy.stats import shapiro\nimport pandas as pd\n\n# Dictionary to track lambda values for inverse transformations\nlambda_dict = {}\n\n# Function to visualize the distribution\ndef plot_hist(df, col):\n    plt.hist(df[col], bins=10, color='blue', edgecolor='black', alpha=0.7)\n    plt.title(f'Distribution of {col}')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.show()\n\n# Function to apply transformations\ndef apply_transformations(df, skewed_cols, lambda_dict=None, calculate_lambda=True):\n    if lambda_dict is None:\n        lambda_dict = {}\n\n    for col in skewed_cols:\n        if col in df.columns:\n            transformations = {}\n            # Check initial skewness\n            print(f\"Initial Skewness of {col}: {df[col].skew()}\")\n\n            # Apply square root transformation\n            df[f'{col}_sqrt'] = np.sqrt(df[col])\n            transformations[f'{col}_sqrt'] = df[f'{col}_sqrt'].skew()\n\n            # Apply cube root transformation\n            df[f'{col}_cbrt'] = np.cbrt(df[col])\n            transformations[f'{col}_cbrt'] = df[f'{col}_cbrt'].skew()\n\n            # Apply log transformation\n            df[f'{col}_log'] = np.log1p(df[col])\n            transformations[f'{col}_log'] = df[f'{col}_log'].skew()\n\n            # Apply Box-Cox transformation (requires positive values)\n            if (df[col] > 0).all():\n                if calculate_lambda:\n                    df[f'{col}_boxcox'], boxcox_lambda = boxcox(df[col] + 1e-6)\n                    lambda_dict[f'{col}_boxcox'] = boxcox_lambda\n                else:\n                    df[f'{col}_boxcox'] = boxcox(df[col] + 1e-6, lmbda=lambda_dict[f'{col}_boxcox'])\n                transformations[f'{col}_boxcox'] = pd.Series(df[f'{col}_boxcox']).skew()\n\n            # Apply Yeo-Johnson transformation\n            if calculate_lambda:\n                df[f'{col}_yeojohnson'], yeojohnson_lambda = yeojohnson(df[col])\n                lambda_dict[f'{col}_yeojohnson'] = yeojohnson_lambda\n            else:\n                df[f'{col}_yeojohnson'] = yeojohnson(df[col], lmbda=lambda_dict[f'{col}_yeojohnson'])\n            transformations[f'{col}_yeojohnson'] = pd.Series(df[f'{col}_yeojohnson']).skew()\n\n            # Plot transformed distributions\n            print(f\"After transformations for {col}:\")\n            for key, value in transformations.items():\n                print(f\"{key}: Skewness = {value}\")\n                plot_hist(df, key)\n\n    return df, lambda_dict\n\n# Apply transformations to the train dataset and calculate lambda values\nprint('Applying transformations to train set:')\ncheck_train_df_cleaned, lambda_dict = apply_transformations(\n    check_train_df_cleaned, skewed_cols, lambda_dict=lambda_dict, calculate_lambda=True\n)\n\n# Apply the same transformations to the test dataset using the lambda values from the train dataset\nprint('Applying transformations to test set:')\ncheck_test_df_cleaned, _ = apply_transformations(\n   check_test_df_cleaned, skewed_cols, lambda_dict=lambda_dict, calculate_lambda=False\n)\n\n# Display the tracked lambda values\nprint(\"Tracked Lambda Values:\")\nfor key, value in lambda_dict.items():\n    print(f\"{key}: lambda = {value}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T19:55:02.131643Z","iopub.status.idle":"2024-12-31T19:55:02.131984Z","shell.execute_reply":"2024-12-31T19:55:02.131854Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Selecting yeo johnson transformation for all the three skewed columns","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef plot_correlation_matrix(df, figsize=(10, 8), save_plot=False, filename=\"correlation_matrix.png\"):\n    \"\"\"\n    Plot the correlation matrix of a DataFrame.\n    Parameters:\n        df (pd.DataFrame): The DataFrame containing the features.\n        figsize (tuple): Size of the heatmap figure.\n        save_plot (bool): Whether to save the plot as a file.\n        filename (str): Name of the file to save the plot if save_plot is True.\n    \"\"\"\n    # Compute the correlation matrix\n    correlation_matrix = df.corr()\n\n    # Create the heatmap\n    plt.figure(figsize=figsize)\n    sns.heatmap(\n        correlation_matrix,\n        annot=True,\n        fmt=\".2f\",\n        cmap=\"coolwarm\",\n        cbar=True,\n        square=True,\n        linewidths=0.5,\n        annot_kws={\"size\": 8}\n    )\n    plt.title(\"Feature Correlation Matrix\", fontsize=16)\n    plt.xticks(rotation=45, ha='right')\n    plt.yticks(rotation=0)\n\n    if save_plot:\n        plt.savefig(filename, bbox_inches=\"tight\")\n        print(f\"Correlation matrix saved as {filename}\")\n    else:\n        plt.show()\n\n# Example: Visualize correlation for train and test DataFrames\nprint(\"Correlation Matrix for Train DataFrame\")\nplot_correlation_matrix(train_df_cleaned, figsize=(12, 10))\n\nprint(\"Correlation Matrix for Test DataFrame\")\nplot_correlation_matrix(test_df_cleaned, figsize=(12, 10), save_plot=True, filename=\"test_correlation_matrix.png\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-31T19:55:02.137950Z","iopub.status.idle":"2024-12-31T19:55:02.138339Z","shell.execute_reply":"2024-12-31T19:55:02.138168Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}